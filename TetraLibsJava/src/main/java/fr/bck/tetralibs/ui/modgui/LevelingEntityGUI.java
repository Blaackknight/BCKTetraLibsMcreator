package fr.bck.tetralibs.ui.modgui;

import fr.bck.tetralibs.element.types.LevelingEntity;
import fr.bck.tetralibs.element.types.TetraLibsElement;
import fr.bck.tetralibs.registry.PluginElementTypes;
import net.mcreator.blockly.BlocklyCompileNote;
import net.mcreator.blockly.IBlockGenerator;
import net.mcreator.blockly.data.BlocklyLoader;
import net.mcreator.blockly.data.ToolboxBlock;
import net.mcreator.blockly.data.ToolboxType;
import net.mcreator.blockly.java.BlocklyToJava;
import net.mcreator.generator.blockly.BlocklyBlockCodeGenerator;
import net.mcreator.generator.blockly.ProceduralBlockCodeGenerator;
import net.mcreator.generator.template.TemplateGenerator;
import net.mcreator.generator.template.TemplateGeneratorException;
import net.mcreator.minecraft.ElementUtil;
import net.mcreator.ui.MCreator;
import net.mcreator.ui.blockly.BlocklyEditorToolbar;
import net.mcreator.ui.blockly.BlocklyEditorType;
import net.mcreator.ui.blockly.BlocklyPanel;
import net.mcreator.ui.blockly.CompileNotesPanel;
import net.mcreator.ui.component.JColor;
import net.mcreator.ui.component.JEmptyBox;
import net.mcreator.ui.component.SearchableComboBox;
import net.mcreator.ui.component.util.ComponentUtils;
import net.mcreator.ui.component.util.PanelUtils;
import net.mcreator.ui.dialogs.TextureImportDialogs;
import net.mcreator.ui.help.HelpUtils;
import net.mcreator.ui.init.L10N;
import net.mcreator.ui.init.UIRES;
import net.mcreator.ui.minecraft.*;
import net.mcreator.ui.minecraft.states.entity.JEntityDataList;
import net.mcreator.ui.modgui.IBlocklyPanelHolder;
import net.mcreator.ui.modgui.ModElementGUI;
import net.mcreator.ui.procedure.NumberProcedureSelector;
import net.mcreator.ui.procedure.ProcedureSelector;
import net.mcreator.ui.validation.AggregatedValidationResult;
import net.mcreator.ui.validation.IValidable;
import net.mcreator.ui.validation.ValidationGroup;
import net.mcreator.ui.validation.Validator;
import net.mcreator.ui.validation.component.VComboBox;
import net.mcreator.ui.validation.component.VTextField;
import net.mcreator.ui.validation.validators.TextFieldValidator;
import net.mcreator.ui.workspace.resources.TextureType;
import net.mcreator.util.StringUtils;
import net.mcreator.workspace.elements.ModElement;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

public class LevelingEntityGUI extends ModElementGUI<LevelingEntity> implements TetraLibsElement {
    private ProcedureSelector onStruckByLightning;
    private ProcedureSelector whenMobFalls;
    private ProcedureSelector whenMobDies;
    private ProcedureSelector whenMobIsHurt;
    private ProcedureSelector onRightClickedOn;
    private ProcedureSelector whenThisMobKillsAnother;
    private ProcedureSelector onMobTickUpdate;
    private ProcedureSelector onPlayerCollidesWith;
    private ProcedureSelector onInitialSpawn;
    private ProcedureSelector spawningCondition;
    private ProcedureSelector onLevelUp;
    public NumberProcedureSelector visualScale;
    public NumberProcedureSelector boundingBoxScale;
    private ProcedureSelector solidBoundingBox;
    private final SoundSelector livingSound;
    private final SoundSelector hurtSound;
    private final SoundSelector deathSound;
    private final SoundSelector stepSound;
    private final SoundSelector raidCelebrationSound;
    private final VTextField mobName;
    private final JSpinner attackStrength;
    private final JSpinner movementSpeed;
    private final JSpinner armorBaseValue;
    private final JSpinner health;
    private final JSpinner knockbackResistance;
    private final JSpinner attackKnockback;
    private final JSpinner stepHeight;
    private final JSpinner attackRate;
    private final JSpinner trackingRange;
    private final JSpinner followRange;
    private final JSpinner rangedAttackInterval;
    private final JSpinner rangedAttackRadius;
    private final JSpinner spawningProbability;
    private final JSpinner minNumberOfMobsPerGroup;
    private final JSpinner maxNumberOfMobsPerGroup;
    private final JSpinner modelWidth;
    private final JSpinner modelHeight;
    private final JSpinner mountedYOffset;
    private final JSpinner modelShadowSize;
    private final JCheckBox disableCollisions;
    private final JSpinner xpAmount;
    private final JCheckBox hasAI;
    private final JCheckBox isBoss;
    private final JCheckBox immuneToFire;
    private final JCheckBox immuneToArrows;
    private final JCheckBox immuneToFallDamage;
    private final JCheckBox immuneToCactus;
    private final JCheckBox immuneToDrowning;
    private final JCheckBox immuneToLightning;
    private final JCheckBox immuneToPotions;
    private final JCheckBox immuneToPlayer;
    private final JCheckBox immuneToExplosion;
    private final JCheckBox immuneToTrident;
    private final JCheckBox immuneToAnvil;
    private final JCheckBox immuneToWither;
    private final JCheckBox immuneToDragonBreath;
    private final JCheckBox waterMob;
    private final JCheckBox flyingMob;
    private final JCheckBox hasSpawnEgg;
    private final TabListField creativeTabs;
    private final JComboBox<String> mobSpawningType;
    private MCItemHolder mobDrop;
    private MCItemHolder equipmentMainHand;
    private MCItemHolder equipmentHelmet;
    private MCItemHolder equipmentBody;
    private MCItemHolder equipmentLeggings;
    private MCItemHolder equipmentBoots;
    private MCItemHolder equipmentOffHand;
    private final JComboBox<String> guiBoundTo;
    private final JSpinner inventorySize;
    private final JSpinner inventoryStackSize;
    private MCItemHolder rangedAttackItem;
    private final JComboBox<String> rangedItemType;
    private final JTextField mobLabel;
    private final JCheckBox spawnInDungeons;
    private final JColor spawnEggBaseColor;
    private final JColor spawnEggDotColor;
    private final VComboBox<String> mobModelTexture;
    private final VComboBox<String> mobModelGlowTexture;
    private JEntityDataList entityDataList;
    private static final BlocklyCompileNote aiUnmodifiableCompileNote;
    private final JComboBox<String> aiBase;
    private final JSpinner[] raidSpawnsCount;
    private final JComboBox<String> mobBehaviourType;
    private final JComboBox<String> mobCreatureType;
    private final JComboBox<String> bossBarColor;
    private final JComboBox<String> bossBarType;
    private final JCheckBox ridable;
    private final JCheckBox canControlForward;
    private final JCheckBox canControlStrafe;
    private final JCheckBox breedable;
    private final JCheckBox tameable;
    private final JCheckBox ranged;
    private MCItemListField breedTriggerItems;
    private final JCheckBox spawnThisMob;
    private final JCheckBox doesDespawnWhenIdle;
    private BiomeListField restrictionBiomes;
    private BlocklyPanel blocklyPanel;
    private final CompileNotesPanel compileNotesPanel;
    private boolean hasErrors;
    private Map<String, ToolboxBlock> externalBlocks;
    private final List<IBlocklyPanelHolder.BlocklyChangedListener> blocklyChangedListeners;
    private boolean disableMobModelCheckBoxListener;
    private final JCheckBox disableDeathRotation;
    private final JSpinner deathTime;
    private final JSpinner lerp;
    private final JSpinner height;
    private final VTextField bck_;
    private final JTextField animation2;
    private final JTextField animation3;
    private final JTextField animation4;
    private final JTextField animation5;
    private final JTextField animation6;
    private final JTextField animation7;
    private final JTextField animation8;
    private final JTextField animation9;
    private final JTextField animation10;
    private final JCheckBox enable2;
    private final JCheckBox enable3;
    private final JCheckBox enable4;
    private final JCheckBox enable5;
    private final JCheckBox enable6;
    private final JCheckBox enable7;
    private final JCheckBox enable8;
    private final JCheckBox enable9;
    private final JCheckBox enable10;
    private ProcedureSelector finishedDying;
    private final JCheckBox headMovement;
    private final JCheckBox eyeHeight;
    private final JTextField groupName;
    private final VComboBox<String> geoModel;
    private final List<?> unmodifiableAIBases;

    public LevelingEntityGUI(MCreator mcreator, ModElement modElement, boolean editingMode) {
        super(mcreator, modElement, editingMode);
        this.livingSound = new SoundSelector(this.mcreator);
        this.hurtSound = new SoundSelector(this.mcreator);
        this.deathSound = new SoundSelector(this.mcreator);
        this.stepSound = new SoundSelector(this.mcreator);
        this.raidCelebrationSound = new SoundSelector(this.mcreator);
        this.mobName = new VTextField();
        this.attackStrength = new JSpinner(new SpinnerNumberModel(3, 0, 10000, 1));
        this.movementSpeed = new JSpinner(new SpinnerNumberModel(0.3, (double) 0.0F, (double) 50.0F, 0.1));
        this.armorBaseValue = new JSpinner(new SpinnerNumberModel((double) 0.0F, (double) 0.0F, (double) 100.0F, 0.1));
        this.health = new JSpinner(new SpinnerNumberModel(10, 0, 1024, 1));
        this.knockbackResistance = new JSpinner(new SpinnerNumberModel((double) 0.0F, (double) 0.0F, (double) 1000.0F, 0.1));
        this.attackKnockback = new JSpinner(new SpinnerNumberModel((double) 0.0F, (double) 0.0F, (double) 1000.0F, 0.1));
        this.stepHeight = new JSpinner(new SpinnerNumberModel(0.6, (double) 0.0F, (double) 255.0F, 0.1));
        this.attackRate = new JSpinner(new SpinnerNumberModel(7, 0, 255, 1));
        this.trackingRange = new JSpinner(new SpinnerNumberModel(64, 0, 10000, 1));
        this.followRange = new JSpinner(new SpinnerNumberModel(16, 0, 2048, 1));
        this.rangedAttackInterval = new JSpinner(new SpinnerNumberModel(20, 0, 1024, 1));
        this.rangedAttackRadius = new JSpinner(new SpinnerNumberModel((double) 10.0F, (double) 0.0F, (double) 1024.0F, 0.1));
        this.spawningProbability = new JSpinner(new SpinnerNumberModel(20, 1, 1000, 1));
        this.minNumberOfMobsPerGroup = new JSpinner(new SpinnerNumberModel(4, 1, 1000, 1));
        this.maxNumberOfMobsPerGroup = new JSpinner(new SpinnerNumberModel(4, 1, 1000, 1));
        this.modelWidth = new JSpinner(new SpinnerNumberModel(0.6, (double) 0.0F, (double) 1024.0F, 0.1));
        this.modelHeight = new JSpinner(new SpinnerNumberModel(1.8, (double) 0.0F, (double) 1024.0F, 0.1));
        this.mountedYOffset = new JSpinner(new SpinnerNumberModel((double) 0.0F, (double) -1024.0F, (double) 1024.0F, 0.1));
        this.modelShadowSize = new JSpinner(new SpinnerNumberModel((double) 0.5F, (double) 0.0F, (double) 20.0F, 0.1));
        this.disableCollisions = L10N.checkbox("elementgui.living_entity.disable_collisions", new Object[0]);
        this.xpAmount = new JSpinner(new SpinnerNumberModel(0, 0, 100000, 1));
        this.hasAI = L10N.checkbox("elementgui.living_entity.has_ai", new Object[0]);
        this.isBoss = new JCheckBox();
        this.immuneToFire = L10N.checkbox("elementgui.living_entity.immune_fire", new Object[0]);
        this.immuneToArrows = L10N.checkbox("elementgui.living_entity.immune_arrows", new Object[0]);
        this.immuneToFallDamage = L10N.checkbox("elementgui.living_entity.immune_fall_damage", new Object[0]);
        this.immuneToCactus = L10N.checkbox("elementgui.living_entity.immune_cactus", new Object[0]);
        this.immuneToDrowning = L10N.checkbox("elementgui.living_entity.immune_drowning", new Object[0]);
        this.immuneToLightning = L10N.checkbox("elementgui.living_entity.immune_lightning", new Object[0]);
        this.immuneToPotions = L10N.checkbox("elementgui.living_entity.immune_potions", new Object[0]);
        this.immuneToPlayer = L10N.checkbox("elementgui.living_entity.immune_player", new Object[0]);
        this.immuneToExplosion = L10N.checkbox("elementgui.living_entity.immune_explosions", new Object[0]);
        this.immuneToTrident = L10N.checkbox("elementgui.living_entity.immune_trident", new Object[0]);
        this.immuneToAnvil = L10N.checkbox("elementgui.living_entity.immune_anvil", new Object[0]);
        this.immuneToWither = L10N.checkbox("elementgui.living_entity.immune_wither", new Object[0]);
        this.immuneToDragonBreath = L10N.checkbox("elementgui.living_entity.immune_dragon_breath", new Object[0]);
        this.waterMob = L10N.checkbox("elementgui.living_entity.is_water_mob", new Object[0]);
        this.flyingMob = L10N.checkbox("elementgui.living_entity.is_flying_mob", new Object[0]);
        this.hasSpawnEgg = new JCheckBox();
        this.creativeTabs = new TabListField(this.mcreator);
        this.mobSpawningType = new JComboBox(ElementUtil.getDataListAsStringArray("mobspawntypes"));
        this.guiBoundTo = new JComboBox();
        this.inventorySize = new JSpinner(new SpinnerNumberModel(9, 0, 256, 1));
        this.inventoryStackSize = new JSpinner(new SpinnerNumberModel(64, 1, 1024, 1));
        this.rangedItemType = new JComboBox();
        this.mobLabel = new JTextField();
        this.spawnInDungeons = L10N.checkbox("elementgui.living_entity.spawn_dungeons", new Object[0]);
        this.spawnEggBaseColor = new JColor(this.mcreator, false, false);
        this.spawnEggDotColor = new JColor(this.mcreator, false, false);
        this.mobModelTexture = new SearchableComboBox();
        this.mobModelGlowTexture = new SearchableComboBox();
        this.aiBase = new JComboBox((String[]) Stream.of("(none)", "Creeper", "Skeleton", "Enderman", "Blaze", "Slime", "Witch", "Zombie", "MagmaCube", "Pig", "Villager", "Wolf", "Cow", "Bat", "Chicken", "Ocelot", "Squid", "Horse", "Spider", "IronGolem").sorted().toArray((x$0) -> new String[x$0]));
        this.raidSpawnsCount = new JSpinner[]{new JSpinner(new SpinnerNumberModel(4, 0, 1000, 1)), new JSpinner(new SpinnerNumberModel(3, 0, 1000, 1)), new JSpinner(new SpinnerNumberModel(3, 0, 1000, 1)), new JSpinner(new SpinnerNumberModel(4, 0, 1000, 1)), new JSpinner(new SpinnerNumberModel(4, 0, 1000, 1)), new JSpinner(new SpinnerNumberModel(4, 0, 1000, 1)), new JSpinner(new SpinnerNumberModel(2, 0, 1000, 1))};
        this.mobBehaviourType = new JComboBox(new String[]{"Mob", "Creature", "Raider"});
        this.mobCreatureType = new JComboBox(new String[]{"UNDEFINED", "UNDEAD", "ARTHROPOD", "ILLAGER", "WATER"});
        this.bossBarColor = new JComboBox(new String[]{"PINK", "BLUE", "RED", "GREEN", "YELLOW", "PURPLE", "WHITE"});
        this.bossBarType = new JComboBox(new String[]{"PROGRESS", "NOTCHED_6", "NOTCHED_10", "NOTCHED_12", "NOTCHED_20"});
        this.ridable = L10N.checkbox("elementgui.living_entity.is_rideable", new Object[0]);
        this.canControlForward = L10N.checkbox("elementgui.living_entity.control_forward", new Object[0]);
        this.canControlStrafe = L10N.checkbox("elementgui.living_entity.control_strafe", new Object[0]);
        this.breedable = L10N.checkbox("elementgui.living_entity.is_breedable", new Object[0]);
        this.tameable = L10N.checkbox("elementgui.living_entity.is_tameable", new Object[0]);
        this.ranged = L10N.checkbox("elementgui.living_entity.is_ranged", new Object[0]);
        this.spawnThisMob = new JCheckBox();
        this.doesDespawnWhenIdle = new JCheckBox();
        this.compileNotesPanel = new CompileNotesPanel();
        this.hasErrors = false;
        this.blocklyChangedListeners = new ArrayList();
        this.disableMobModelCheckBoxListener = false;
        this.disableDeathRotation = L10N.checkbox("elementgui.common.enable", new Object[0]);
        this.deathTime = new JSpinner(new SpinnerNumberModel(20, 0, 10000, 1));
        this.lerp = new JSpinner(new SpinnerNumberModel(4, 0, 1000, 1));
        this.height = new JSpinner(new SpinnerNumberModel((double) 1.0F, 0.1, (double) 100.0F, 0.1));
        this. = new VTextField();
        this.animation2 = new JTextField();
        this.animation3 = new JTextField();
        this.animation4 = new JTextField();
        this.animation5 = new JTextField();
        this.animation6 = new JTextField();
        this.animation7 = new JTextField();
        this.animation8 = new JTextField();
        this.animation9 = new JTextField();
        this.animation10 = new JTextField();
        this.enable2 = new JCheckBox();
        this.enable3 = new JCheckBox();
        this.enable4 = new JCheckBox();
        this.enable5 = new JCheckBox();
        this.enable6 = new JCheckBox();
        this.enable7 = new JCheckBox();
        this.enable8 = new JCheckBox();
        this.enable9 = new JCheckBox();
        this.enable10 = new JCheckBox();
        this.headMovement = L10N.checkbox("elementgui.common.enable", new Object[0]);
        this.eyeHeight = L10N.checkbox("elementgui.animatedentity.eye_height", new Object[0]);
        this.groupName = new JTextField();
        this.unmodifiableAIBases = (List) this.mcreator.getWorkspace().getGenerator().getGeneratorConfiguration().getDefinitionsProvider().getModElementDefinition(PluginElementTypes.LEVELINGENTITY).get("unmodifiable_ai_bases");
        this.geoModel = new SearchableComboBox();
        this.initGUI();
        super.finalizeGUI();
    }

    public void addBlocklyChangedListener(IBlocklyPanelHolder.BlocklyChangedListener listener) {
        this.blocklyChangedListeners.add(listener);
    }

    private void setDefaultAISet() {
        this.blocklyPanel.setXML("<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"aitasks_container\" deletable=\"false\" x=\"40\" y=\"40\"><next><block type=\"attack_on_collide\"><field name=\"speed\">1.2</field><field name=\"longmemory\">FALSE</field><next><block type=\"wander\"><field name=\"speed\">1</field><next><block type=\"attack_action\"><field name=\"callhelp\">FALSE</field><next><block type=\"look_around\"><next><block type=\"swim_in_water\"/></next></block></next></block></next></block></next></block></next></block></xml>");
    }

    private synchronized void regenerateAITasks() {
        BlocklyBlockCodeGenerator blocklyBlockCodeGenerator = new BlocklyBlockCodeGenerator(this.externalBlocks, this.mcreator.getGeneratorStats().getBlocklyBlocks(BlocklyEditorType.AI_TASK));

        BlocklyToJava blocklyToJava;
        try {
            blocklyToJava = new BlocklyToJava(this.mcreator.getWorkspace(), this.modElement, BlocklyEditorType.AI_TASK, this.blocklyPanel.getXML(), (TemplateGenerator)null, new IBlockGenerator[]{new ProceduralBlockCodeGenerator(blocklyBlockCodeGenerator)});
        } catch (TemplateGeneratorException var5) {
            return;
        }

        List<BlocklyCompileNote> compileNotesArrayList = blocklyToJava.getCompileNotes();
        if (this.unmodifiableAIBases != null && this.unmodifiableAIBases.contains(this.aiBase.getSelectedItem())) {
            compileNotesArrayList = List.of(aiUnmodifiableCompileNote);
        }

        SwingUtilities.invokeLater(() -> {
            this.compileNotesPanel.updateCompileNotes(compileNotesArrayList);
            this.blocklyChangedListeners.forEach((l) -> l.blocklyChanged(this.blocklyPanel));
        });
    }

    protected void initGUI() {
        this.onStruckByLightning = new ProcedureSelector(this.withEntry("entity/when_struck_by_lightning"), this.mcreator, L10N.t("elementgui.living_entity.event_struck_by_lightning", new Object[0]), Dependency.fromString("x:number/y:number/z:number/world:world/entity:entity"));
        this.whenMobFalls = new ProcedureSelector(this.withEntry("entity/when_falls"), this.mcreator, L10N.t("elementgui.living_entity.event_mob_falls", new Object[0]), Dependency.fromString("x:number/y:number/z:number/world:world/entity:entity/damagesource:damagesource"));
        this.whenMobDies = new ProcedureSelector(this.withEntry("entity/when_dies"), this.mcreator, L10N.t("elementgui.living_entity.event_mob_dies", new Object[0]), Dependency.fromString("x:number/y:number/z:number/world:world/entity:entity/sourceentity:entity/immediatesourceentity:entity/damagesource:damagesource"));
        this.whenMobIsHurt = new ProcedureSelector(this.withEntry("entity/when_hurt"), this.mcreator, L10N.t("elementgui.living_entity.event_mob_is_hurt", new Object[0]), Dependency.fromString("x:number/y:number/z:number/world:world/entity:entity/sourceentity:entity/immediatesourceentity:entity/damagesource:damagesource"));
        this.onRightClickedOn = (new ProcedureSelector(this.withEntry("entity/when_right_clicked"), this.mcreator, L10N.t("elementgui.living_entity.event_mob_right_clicked", new Object[0]), BuiltInTypes.ACTIONRESULTTYPE, Dependency.fromString("x:number/y:number/z:number/world:world/entity:entity/sourceentity:entity/itemstack:itemstack"))).makeReturnValueOptional();
        this.whenThisMobKillsAnother = new ProcedureSelector(this.withEntry("entity/when_kills_another"), this.mcreator, L10N.t("elementgui.living_entity.event_mob_kills_another", new Object[0]), Dependency.fromString("x:number/y:number/z:number/world:world/entity:entity/sourceentity:entity/immediatesourceentity:entity/damagesource:damagesource"));
        this.onMobTickUpdate = new ProcedureSelector(this.withEntry("entity/on_tick_update"), this.mcreator, L10N.t("elementgui.living_entity.event_mob_tick_update", new Object[0]), Dependency.fromString("x:number/y:number/z:number/world:world/entity:entity"));
        this.onPlayerCollidesWith = new ProcedureSelector(this.withEntry("entity/when_player_collides"), this.mcreator, L10N.t("elementgui.living_entity.event_player_collides_with", new Object[0]), Dependency.fromString("x:number/y:number/z:number/world:world/entity:entity/sourceentity:entity"));
        this.onInitialSpawn = new ProcedureSelector(this.withEntry("entity/on_initial_spawn"), this.mcreator, L10N.t("elementgui.living_entity.event_initial_spawn", new Object[0]), Dependency.fromString("x:number/y:number/z:number/world:world/entity:entity"));
        this.finishedDying = new ProcedureSelector(this.withEntry("geckolib/finished_dying"), this.mcreator, L10N.t("elementgui.animatedentity.finished_dying", new Object[0]), Dependency.fromString("x:number/y:number/z:number/world:world/entity:entity"));
        this.spawningCondition = (new ProcedureSelector(this.withEntry("entity/condition_natural_spawning"), this.mcreator, L10N.t("elementgui.living_entity.condition_natural_spawn", new Object[0]), BuiltInTypes.LOGIC, Dependency.fromString("x:number/y:number/z:number/world:world"))).setDefaultName(L10N.t("condition.common.use_vanilla", new Object[0])).makeInline();
        this.visualScale = new NumberProcedureSelector(this.withEntry("geckolib/visual_scale"), this.mcreator, L10N.t("elementgui.animatedentity.visual_scale", new Object[0]), Side.BOTH, new JSpinner(new SpinnerNumberModel((double)1.0F, 0.1, (double)1024.0F, 0.1)), 300, Dependency.fromString("x:number/y:number/z:number/world:world/entity:entity"));
        this.boundingBoxScale = new NumberProcedureSelector(this.withEntry("geckolib/bounding_box_scale.md"), this.mcreator, L10N.t("elementgui.animatedentity.bounding_box_scale", new Object[0]), Side.BOTH, new JSpinner(new SpinnerNumberModel((double)1.0F, 0.1, (double)1024.0F, 0.1)), 300, Dependency.fromString("x:number/y:number/z:number/world:world/entity:entity"));
        this.solidBoundingBox = (new ProcedureSelector(this.withEntry("geckolib/condition_solid_bounding_box"), this.mcreator, L10N.t("elementgui.living_entity.condition_solid_bounding_box", new Object[0]), BuiltInTypes.LOGIC, Dependency.fromString("x:number/y:number/z:number/world:world/entity:entity"))).setDefaultName(L10N.t("condition.common.false", new Object[0])).makeInline();
        this.restrictionBiomes = new BiomeListField(this.mcreator);
        this.breedTriggerItems = new MCItemListField(this.mcreator, ElementUtil::loadBlocksAndItems);
        this.entityDataList = new JEntityDataList(this.mcreator, this);
        this.mobModelTexture.setRenderer(new WTextureComboBoxRenderer.TypeTextures(this.mcreator.getWorkspace(), TextureType.ENTITY));
        this.mobModelGlowTexture.setRenderer(new WTextureComboBoxRenderer.TypeTextures(this.mcreator.getWorkspace(), TextureType.ENTITY));
        this.guiBoundTo.addActionListener((e) -> {
            if (!this.isEditingMode()) {
                String selected = (String)this.guiBoundTo.getSelectedItem();
                if (selected != null) {
                    ModElement element = this.mcreator.getWorkspace().getModElementByName(selected);
                    if (element != null) {
                        GeneratableElement generatableElement = element.getGeneratableElement();
                        if (generatableElement instanceof GUI) {
                            this.inventorySize.setValue(((GUI)generatableElement).getMaxSlotID() + 1);
                        }
                    }
                }
            }

        });
        this.spawnInDungeons.setOpaque(false);
        this.mobModelTexture.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXXXXXXXXXX");
        this.mobModelGlowTexture.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXXXXXXXXXX");
        this.mobDrop = new MCItemHolder(this.mcreator, ElementUtil::loadBlocksAndItems);
        this.equipmentMainHand = new MCItemHolder(this.mcreator, ElementUtil::loadBlocksAndItems);
        this.equipmentHelmet = new MCItemHolder(this.mcreator, ElementUtil::loadBlocksAndItems);
        this.equipmentBody = new MCItemHolder(this.mcreator, ElementUtil::loadBlocksAndItems);
        this.equipmentLeggings = new MCItemHolder(this.mcreator, ElementUtil::loadBlocksAndItems);
        this.equipmentBoots = new MCItemHolder(this.mcreator, ElementUtil::loadBlocksAndItems);
        this.equipmentOffHand = new MCItemHolder(this.mcreator, ElementUtil::loadBlocksAndItems);
        this.rangedAttackItem = new MCItemHolder(this.mcreator, ElementUtil::loadBlocksAndItems);
        JPanel pane1 = new JPanel(new BorderLayout(0, 0));
        JPanel pane2 = new JPanel(new BorderLayout(0, 0));
        JPanel pane3 = new JPanel(new BorderLayout(0, 0));
        JPanel pane4 = new JPanel(new BorderLayout(0, 0));
        JPanel pane5 = new JPanel(new BorderLayout(0, 0));
        JPanel pane7 = new JPanel(new BorderLayout(0, 0));
        JPanel pane8 = new JPanel(new BorderLayout(0, 0));
        JPanel subpane1 = new JPanel(new GridLayout(10, 2, 0, 2));
        this.immuneToFire.setOpaque(false);
        this.immuneToArrows.setOpaque(false);
        this.immuneToFallDamage.setOpaque(false);
        this.immuneToCactus.setOpaque(false);
        this.immuneToDrowning.setOpaque(false);
        this.immuneToLightning.setOpaque(false);
        this.immuneToPotions.setOpaque(false);
        this.immuneToPlayer.setOpaque(false);
        this.immuneToExplosion.setOpaque(false);
        this.immuneToTrident.setOpaque(false);
        this.immuneToAnvil.setOpaque(false);
        this.immuneToDragonBreath.setOpaque(false);
        this.immuneToWither.setOpaque(false);
        subpane1.setOpaque(false);
        subpane1.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/behaviour"), L10N.label("elementgui.living_entity.behaviour", new Object[0])));
        subpane1.add(this.mobBehaviourType);
        subpane1.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/creature_type"), L10N.label("elementgui.living_entity.creature_type", new Object[0])));
        subpane1.add(this.mobCreatureType);
        subpane1.add(PanelUtils.join(0, new Component[]{L10N.label("elementgui.living_entity.drop_health_xp_amount", new Object[0]), HelpUtils.helpButton(this.withEntry("entity/drop")), HelpUtils.helpButton(this.withEntry("entity/health")), HelpUtils.helpButton(this.withEntry("entity/xp_amount"))}));
        subpane1.add(PanelUtils.westAndCenterElement(PanelUtils.totalCenterInPanel(this.mobDrop), PanelUtils.gridElements(1, 2, 2, 0, new Component[]{this.health, this.xpAmount}), 8, 8));
        subpane1.add(PanelUtils.join(0, new Component[]{L10N.label("elementgui.living_entity.movement_speed_step_height", new Object[0]), HelpUtils.helpButton(this.withEntry("entity/movement_speed")), HelpUtils.helpButton(this.withEntry("entity/step_height"))}));
        subpane1.add(PanelUtils.gridElements(1, 2, 2, 0, new Component[]{this.movementSpeed, this.stepHeight}));
        subpane1.add(PanelUtils.join(0, new Component[]{L10N.label("elementgui.living_entity.follow_range_tracking_range", new Object[0]), HelpUtils.helpButton(this.withEntry("entity/follow_range")), HelpUtils.helpButton(this.withEntry("entity/tracking_range"))}));
        subpane1.add(PanelUtils.gridElements(1, 2, 2, 0, new Component[]{this.followRange, this.trackingRange}));
        subpane1.add(PanelUtils.join(0, new Component[]{L10N.label("elementgui.living_entity.attack_strenght_armor_value_knockback", new Object[0]), HelpUtils.helpButton(this.withEntry("entity/attack_strength")), HelpUtils.helpButton(this.withEntry("entity/armor_base_value")), HelpUtils.helpButton(this.withEntry("entity/attack_knockback")), HelpUtils.helpButton(this.withEntry("entity/knockback_resistance"))}));
        subpane1.add(PanelUtils.gridElements(1, 4, 2, 0, new Component[]{this.attackStrength, this.armorBaseValue, this.attackKnockback, this.knockbackResistance}));
        subpane1.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/equipment"), L10N.label("elementgui.living_entity.equipment", new Object[0])));
        subpane1.add(PanelUtils.join(0, 0, 2, new Component[]{PanelUtils.totalCenterInPanel(PanelUtils.join(0, 2, 0, new Component[]{this.equipmentMainHand, this.equipmentOffHand, this.equipmentHelmet, this.equipmentBody, this.equipmentLeggings, this.equipmentBoots}))}));
        subpane1.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/ridable"), L10N.label("elementgui.living_entity.ridable", new Object[0])));
        subpane1.add(PanelUtils.join(0, 0, 0, new Component[]{this.ridable, this.canControlForward, this.canControlStrafe}));
        subpane1.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/water_entity"), L10N.label("elementgui.living_entity.water_mob", new Object[0])));
        subpane1.add(this.waterMob);
        subpane1.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/flying_entity"), L10N.label("elementgui.living_entity.flying_mob", new Object[0])));
        subpane1.add(this.flyingMob);
        this.hasAI.setOpaque(false);
        this.isBoss.setOpaque(false);
        this.waterMob.setOpaque(false);
        this.flyingMob.setOpaque(false);
        this.hasSpawnEgg.setOpaque(false);
        this.disableCollisions.setOpaque(false);
        this.livingSound.setText("");
        this.hurtSound.setText("entity.generic.hurt");
        this.deathSound.setText("entity.generic.death");
        JPanel subpanel2 = new JPanel(new GridLayout(1, 2, 0, 2));
        subpanel2.setOpaque(false);
        subpanel2.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/immunity"), L10N.label("elementgui.living_entity.is_immune_to", new Object[0])));
        subpanel2.add(PanelUtils.gridElements(4, 4, 0, 0, new Component[]{this.immuneToFire, this.immuneToArrows, this.immuneToFallDamage, this.immuneToCactus, this.immuneToDrowning, this.immuneToLightning, this.immuneToPotions, this.immuneToPlayer, this.immuneToExplosion, this.immuneToAnvil, this.immuneToTrident, this.immuneToDragonBreath, this.immuneToWither}));
        pane1.add("Center", PanelUtils.totalCenterInPanel(PanelUtils.northAndCenterElement(subpane1, subpanel2)));
        JPanel entityDataListPanel = new JPanel(new GridLayout());
        JComponent entityDataListComp = PanelUtils.northAndCenterElement(HelpUtils.wrapWithHelpButton(this.withEntry("entity/entity_data"), L10N.label("elementgui.living_entity.entity_data", new Object[0])), this.entityDataList);
        entityDataListPanel.setOpaque(false);
        entityDataListComp.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        entityDataListPanel.add(entityDataListComp);
        JPanel spo2 = new JPanel(new GridLayout(15, 2, 2, 2));
        spo2.setOpaque(false);
        spo2.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/name"), L10N.label("elementgui.living_entity.name", new Object[0])));
        spo2.add(this.mobName);
        spo2.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/model"), L10N.label("elementgui.animatedentity.entity_model", new Object[0])));
        this.geoModel.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXXXXXXXXXX");
        this.geoModel.setRenderer(new GeomodelRenderer());
        ComponentUtils.deriveFont(this.geoModel, 16.0F);
        spo2.add(this.geoModel);
        spo2.add(new JEmptyBox());
        spo2.add(this.visualScale);
        spo2.add(new JEmptyBox());
        spo2.add(this.boundingBoxScale);
        spo2.add(new JEmptyBox());
        spo2.add(this.solidBoundingBox);
        JButton importmobtexture = new JButton(UIRES.get("18px.add"));
        importmobtexture.setToolTipText(L10N.t("elementgui.living_entity.entity_model_import", new Object[0]));
        importmobtexture.setOpaque(false);
        importmobtexture.addActionListener((e) -> {
            TextureImportDialogs.importMultipleTextures(this.mcreator, TextureType.ENTITY);
            this.mobModelTexture.removeAllItems();
            this.mobModelTexture.addItem("");
            this.mcreator.getFolderManager().getTexturesList(TextureType.ENTITY).forEach((el) -> this.mobModelTexture.addItem(el.getName()));
            this.mobModelGlowTexture.removeAllItems();
            this.mobModelGlowTexture.addItem("");
            this.mcreator.getFolderManager().getTexturesList(TextureType.ENTITY).forEach((el) -> this.mobModelGlowTexture.addItem(el.getName()));
        });
        spo2.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/texture"), L10N.label("elementgui.living_entity.texture", new Object[0])));
        spo2.add(PanelUtils.centerAndEastElement(this.mobModelTexture, importmobtexture, 0, 0));
        spo2.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/glow_texture"), L10N.label("elementgui.living_entity.glow_texture", new Object[0])));
        spo2.add(this.mobModelGlowTexture);
        ComponentUtils.deriveFont(this.mobModelTexture, 16.0F);
        ComponentUtils.deriveFont(this.mobModelGlowTexture, 16.0F);
        ComponentUtils.deriveFont(this.aiBase, 16.0F);
        ComponentUtils.deriveFont(this.rangedItemType, 16.0F);
        this.spawnEggBaseColor.setOpaque(false);
        this.spawnEggDotColor.setOpaque(false);
        this.modelWidth.setPreferredSize(new Dimension(85, 32));
        this.mountedYOffset.setPreferredSize(new Dimension(85, 32));
        this.modelHeight.setPreferredSize(new Dimension(85, 32));
        this.modelShadowSize.setPreferredSize(new Dimension(85, 32));
        this.armorBaseValue.setPreferredSize(new Dimension(0, 32));
        this.movementSpeed.setPreferredSize(new Dimension(250, 32));
        this.trackingRange.setPreferredSize(new Dimension(250, 32));
        this.attackStrength.setPreferredSize(new Dimension(0, 32));
        this.stepHeight.setPreferredSize(new Dimension(250, 32));
        this.attackKnockback.setPreferredSize(new Dimension(0, 32));
        this.knockbackResistance.setPreferredSize(new Dimension(0, 32));
        this.followRange.setPreferredSize(new Dimension(250, 32));
        this.health.setPreferredSize(new Dimension(250, 32));
        this.xpAmount.setPreferredSize(new Dimension(250, 32));
        this.rangedAttackInterval.setPreferredSize(new Dimension(85, 32));
        this.rangedAttackRadius.setPreferredSize(new Dimension(85, 32));
        spo2.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/bounding_box"), L10N.label("elementgui.living_entity.bounding_box", new Object[0])));
        spo2.add(PanelUtils.join(0, 0, 0, new Component[]{this.modelWidth, new JEmptyBox(7, 7), this.modelHeight, new JEmptyBox(7, 7), this.modelShadowSize, new JEmptyBox(7, 7), this.mountedYOffset, new JEmptyBox(7, 7), this.disableCollisions}));
        spo2.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/spawn_egg_options"), L10N.label("elementgui.living_entity.spawn_egg_options", new Object[0])));
        this.creativeTabs.setPreferredSize(new Dimension(200, 30));
        spo2.add(PanelUtils.join(0, 5, 0, new Component[]{this.hasSpawnEgg, this.spawnEggBaseColor, this.spawnEggDotColor, this.creativeTabs}));
        this.bossBarColor.setEnabled(false);
        this.bossBarType.setEnabled(false);
        spo2.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/boss_entity"), L10N.label("elementgui.living_entity.mob_boss", new Object[0])));
        spo2.add(PanelUtils.join(0, 5, 0, new Component[]{this.isBoss, this.bossBarColor, this.bossBarType}));
        spo2.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/label"), L10N.label("elementgui.living_entity.label", new Object[0])));
        spo2.add(this.mobLabel);
        spo2.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/sound"), L10N.label("elementgui.living_entity.sound", new Object[0])));
        spo2.add(this.livingSound);
        spo2.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/step_sound"), L10N.label("elementgui.living_entity.step_sound", new Object[0])));
        spo2.add(this.stepSound);
        spo2.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/hurt_sound"), L10N.label("elementgui.living_entity.hurt_sound", new Object[0])));
        spo2.add(this.hurtSound);
        spo2.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/death_sound"), L10N.label("elementgui.living_entity.death_sound", new Object[0])));
        spo2.add(this.deathSound);
        ComponentUtils.deriveFont(this.mobLabel, 16.0F);
        pane2.setOpaque(false);
        pane2.add("Center", PanelUtils.totalCenterInPanel(spo2));
        JPanel aitop = new JPanel(new GridLayout(3, 1, 0, 2));
        aitop.setOpaque(false);
        aitop.add(PanelUtils.join(0, new Component[]{HelpUtils.wrapWithHelpButton(this.withEntry("entity/enable_ai"), this.hasAI)}));
        aitop.add(PanelUtils.join(0, new Component[]{HelpUtils.wrapWithHelpButton(this.withEntry("entity/breedable"), this.breedable), this.breedTriggerItems, this.tameable}));
        this.breedTriggerItems.setPreferredSize(new Dimension(230, 32));
        aitop.add(PanelUtils.join(0, new Component[]{new JEmptyBox(5, 5), HelpUtils.wrapWithHelpButton(this.withEntry("entity/base"), L10N.label("elementgui.living_entity.mob_base", new Object[0])), this.aiBase}));
        this.aiBase.setPreferredSize(new Dimension(250, 32));
        this.aiBase.addActionListener((e) -> this.regenerateAITasks());
        JPanel aitopoveral = new JPanel(new BorderLayout(5, 0));
        aitopoveral.setOpaque(false);
        aitopoveral.add("West", aitop);
        JPanel aitop2 = new JPanel(new GridLayout(2, 1, 0, 0));
        aitop2.setOpaque(false);
        aitop2.add(PanelUtils.join(0, new Component[]{HelpUtils.wrapWithHelpButton(this.withEntry("entity/do_ranged_attacks"), this.ranged), this.rangedItemType, this.rangedAttackItem, this.rangedAttackInterval, this.rangedAttackRadius}));
        JPanel aitop3 = new JPanel(new GridLayout(1, 1, 0, 0));
        aitop3.setOpaque(false);
        aitop3.add(PanelUtils.join(0, new Component[]{HelpUtils.wrapWithHelpButton(this.withEntry("geckolib/eye_height"), this.eyeHeight), this.height}));
        aitop2.add(aitop3);
        aitopoveral.add("Center", aitop2);
        this.rangedAttackItem.setEnabled(false);
        this.rangedItemType.addActionListener((e) -> this.rangedAttackItem.setEnabled("Default item".equals(this.rangedItemType.getSelectedItem())));
        this.ridable.setOpaque(false);
        this.canControlStrafe.setOpaque(false);
        this.canControlForward.setOpaque(false);
        aitopoveral.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder((Color)UIManager.get("MCreatorLAF.BRIGHT_COLOR"), 1), L10N.t("elementgui.living_entity.ai_parameters", new Object[0]), 0, 0, this.getFont().deriveFont(12.0F), (Color)UIManager.get("MCreatorLAF.BRIGHT_COLOR")));
        JPanel aipan = new JPanel(new BorderLayout(0, 5));
        aipan.setOpaque(false);
        this.externalBlocks = BlocklyLoader.INSTANCE.getBlockLoader(BlocklyEditorType.AI_TASK).getDefinedBlocks();
        this.blocklyPanel = new BlocklyPanel(this.mcreator, BlocklyEditorType.AI_TASK);
        this.blocklyPanel.addTaskToRunAfterLoaded(() -> {
            BlocklyLoader.INSTANCE.getBlockLoader(BlocklyEditorType.AI_TASK).loadBlocksAndCategoriesInPanel(this.blocklyPanel, ToolboxType.AI_BUILDER);
            this.blocklyPanel.addChangeListener((changeEvent) -> (new Thread(this::regenerateAITasks, "AITasksRegenerate")).start());
            if (!this.isEditingMode()) {
                this.setDefaultAISet();
            }

        });
        aipan.add("North", aitopoveral);
        JPanel bpb = new JPanel(new GridLayout());
        bpb.setOpaque(false);
        bpb.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder((Color)UIManager.get("MCreatorLAF.BRIGHT_COLOR"), 1), L10N.t("elementgui.living_entity.ai_tasks", new Object[0]), 4, 0, this.getFont(), Color.white));
        BlocklyEditorToolbar blocklyEditorToolbar = new BlocklyEditorToolbar(this.mcreator, BlocklyEditorType.AI_TASK, this.blocklyPanel);
        blocklyEditorToolbar.setTemplateLibButtonWidth(156);
        bpb.add(PanelUtils.northAndCenterElement(blocklyEditorToolbar, this.blocklyPanel));
        aipan.add("Center", bpb);
        aipan.add("South", this.compileNotesPanel);
        this.blocklyPanel.setPreferredSize(new Dimension(150, 150));
        pane3.add("Center", ComponentUtils.applyPadding(aipan, 10, true, true, true, true));
        this.breedable.setOpaque(false);
        this.tameable.setOpaque(false);
        this.ranged.setOpaque(false);
        this.hasAI.setSelected(true);
        this.breedable.addActionListener((actionEvent) -> {
            if (this.breedable.isSelected()) {
                this.hasAI.setSelected(true);
                this.hasAI.setEnabled(false);
                this.breedTriggerItems.setEnabled(true);
                this.tameable.setEnabled(true);
            } else {
                this.hasAI.setEnabled(true);
                this.breedTriggerItems.setEnabled(false);
                this.tameable.setEnabled(false);
            }

        });
        this.isBoss.addActionListener((e) -> {
            this.bossBarColor.setEnabled(this.isBoss.isSelected());
            this.bossBarType.setEnabled(this.isBoss.isSelected());
        });
        pane3.setOpaque(false);
        JPanel events = new JPanel(new GridLayout(3, 4, 8, 8));
        events.add(this.onStruckByLightning);
        events.add(this.whenMobFalls);
        events.add(this.whenMobDies);
        events.add(this.whenMobIsHurt);
        events.add(this.onRightClickedOn);
        events.add(this.whenThisMobKillsAnother);
        events.add(this.onMobTickUpdate);
        events.add(this.onPlayerCollidesWith);
        events.add(this.onInitialSpawn);
        events.setOpaque(false);
        pane4.add("Center", PanelUtils.totalCenterInPanel(events));
        this.isBoss.setOpaque(false);
        pane4.setOpaque(false);
        JPanel selp = new JPanel(new GridLayout(10, 2, 30, 2));
        ComponentUtils.deriveFont(this.mobName, 16.0F);
        this.spawnThisMob.setSelected(true);
        this.doesDespawnWhenIdle.setSelected(true);
        this.spawnThisMob.setOpaque(false);
        this.doesDespawnWhenIdle.setOpaque(false);
        this.hasSpawnEgg.setSelected(true);
        selp.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/enable_spawning"), L10N.label("elementgui.living_entity.enable_mob_spawning", new Object[0])));
        selp.add(this.spawnThisMob);
        selp.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/despawn_idle"), L10N.label("elementgui.living_entity.despawn_idle", new Object[0])));
        selp.add(this.doesDespawnWhenIdle);
        selp.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/spawn_weight"), L10N.label("elementgui.living_entity.spawn_weight", new Object[0])));
        selp.add(this.spawningProbability);
        selp.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/spawn_type"), L10N.label("elementgui.living_entity.spawn_type", new Object[0])));
        selp.add(this.mobSpawningType);
        selp.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/spawn_group_size"), L10N.label("elementgui.living_entity.min_spawn_group_size", new Object[0])));
        selp.add(this.minNumberOfMobsPerGroup);
        selp.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/spawn_group_size"), L10N.label("elementgui.living_entity.max_spawn_group_size", new Object[0])));
        selp.add(this.maxNumberOfMobsPerGroup);
        selp.add(HelpUtils.wrapWithHelpButton(this.withEntry("common/restrict_to_biomes"), L10N.label("elementgui.living_entity.restrict_to_biomes", new Object[0])));
        selp.add(this.restrictionBiomes);
        selp.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/spawn_in_dungeons"), L10N.label("elementgui.living_entity.does_spawn_in_dungeons", new Object[0])));
        selp.add(this.spawnInDungeons);
        selp.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/raid_spawns_counts"), L10N.label("elementgui.living_entity.raid_spawns_counts", new Object[0])));
        selp.add(PanelUtils.gridElements(1, -1, 2, 2, new Component[]{this.raidSpawnsCount[0], this.raidSpawnsCount[1], this.raidSpawnsCount[2], this.raidSpawnsCount[3], this.raidSpawnsCount[4], this.raidSpawnsCount[5], this.raidSpawnsCount[6]}));

        for(JSpinner spinner : this.raidSpawnsCount) {
            spinner.setPreferredSize(new Dimension(40, 0));
        }

        selp.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/raid_celebration_sound"), L10N.label("elementgui.living_entity.raid_celebration_sound", new Object[0])));
        selp.add(this.raidCelebrationSound);
        selp.setOpaque(false);
        JComponent selpcont = PanelUtils.northAndCenterElement(selp, PanelUtils.gridElements(1, 2, 5, 5, new Component[]{L10N.label("elementgui.living_entity.spawn_general_condition", new Object[0]), PanelUtils.westAndCenterElement(new JEmptyBox(12, 5), this.spawningCondition)}), 5, 5);
        pane5.add("Center", PanelUtils.totalCenterInPanel(selpcont));
        pane5.setOpaque(false);
        JPanel props = new JPanel(new GridLayout(3, 2, 35, 2));
        props.setOpaque(false);
        props.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/bind_gui"), L10N.label("elementgui.living_entity.bind_to_gui", new Object[0])));
        props.add(this.guiBoundTo);
        props.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/inventory_size"), L10N.label("elementgui.living_entity.inventory_size", new Object[0])));
        props.add(this.inventorySize);
        props.add(HelpUtils.wrapWithHelpButton(this.withEntry("entity/inventory_stack_size"), L10N.label("elementgui.common.max_stack_size", new Object[0])));
        props.add(this.inventoryStackSize);
        pane7.add(PanelUtils.totalCenterInPanel(props));
        pane7.setOpaque(false);
        pane7.setOpaque(false);
        this.mobModelTexture.setValidator(() -> this.mobModelTexture.getSelectedItem() != null && !((String)this.mobModelTexture.getSelectedItem()).equals("") ? Validator.ValidationResult.PASSED : new Validator.ValidationResult(Validator.ValidationResultType.ERROR, L10N.t("elementgui.living_entity.error_entity_model_needs_texture", new Object[0])));
        this.mobName.setValidator(new TextFieldValidator(this.mobName, L10N.t("elementgui.living_entity.error_entity_needs_name", new Object[0])));
        this.mobName.enableRealtimeValidation();
        this.geoModel.setValidator(() -> this.geoModel.getSelectedItem() != null && !((String)this.geoModel.getSelectedItem()).equals("") ? Validator.ValidationResult.PASSED : new Validator.ValidationResult(Validator.ValidationResultType.ERROR, L10N.t("elementgui.animatedentity.modelname", new Object[0])));
        pane1.setOpaque(false);
        JPanel animations = new JPanel(new GridLayout(11, 2, 20, 2));
        animations.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder((Color)UIManager.get("MCreatorLAF.BRIGHT_COLOR"), 1), L10N.t("elementgui.animatedentity.animations_boarder", new Object[0]), 0, 0, this.getFont().deriveFont(12.0F), (Color)UIManager.get("MCreatorLAF.BRIGHT_COLOR")));
        this.animation1.setPreferredSize(new Dimension(110, 10));
        this.animation2.setPreferredSize(new Dimension(180, 30));
        this.animation3.setPreferredSize(new Dimension(180, 30));
        this.animation4.setPreferredSize(new Dimension(180, 30));
        this.animation5.setPreferredSize(new Dimension(180, 30));
        this.animation6.setPreferredSize(new Dimension(180, 30));
        this.animation7.setPreferredSize(new Dimension(180, 30));
        this.animation8.setPreferredSize(new Dimension(180, 30));
        this.animation9.setPreferredSize(new Dimension(180, 30));
        this.animation10.setPreferredSize(new Dimension(180, 30));
        animations.add(HelpUtils.wrapWithHelpButton(this.withEntry("geckolib/idle_animation"), L10N.label("elementgui.animatedentity.idle_animation", new Object[0])));
        animations.add(this.animation1);
        this.animation1.setValidator(new TextFieldValidator(this.animation1, L10N.t("elementgui.animatedentity.idle_required", new Object[0])));
        this.animation1.enableRealtimeValidation();
        animations.add(HelpUtils.wrapWithHelpButton(this.withEntry("geckolib/walk_animation"), L10N.label("elementgui.animatedentity.walk_animation", new Object[0])));
        animations.add(PanelUtils.join(new Component[]{this.enable2, this.animation2}));
        animations.add(HelpUtils.wrapWithHelpButton(this.withEntry("geckolib/death_animation"), L10N.label("elementgui.animatedentity.death_animation", new Object[0])));
        animations.add(PanelUtils.join(new Component[]{this.enable3, this.animation3}));
        animations.add(HelpUtils.wrapWithHelpButton(this.withEntry("geckolib/attack_animation"), L10N.label("elementgui.animatedentity.attack_animation", new Object[0])));
        animations.add(PanelUtils.join(new Component[]{this.enable4, this.animation4}));
        animations.add(HelpUtils.wrapWithHelpButton(this.withEntry("geckolib/swim_animation"), L10N.label("elementgui.animatedentity.swim_animation", new Object[0])));
        animations.add(PanelUtils.join(new Component[]{this.enable5, this.animation5}));
        animations.add(HelpUtils.wrapWithHelpButton(this.withEntry("geckolib/sneak_animation"), L10N.label("elementgui.animatedentity.sneak_animation", new Object[0])));
        animations.add(PanelUtils.join(new Component[]{this.enable6, this.animation6}));
        animations.add(HelpUtils.wrapWithHelpButton(this.withEntry("geckolib/sprint_animation"), L10N.label("elementgui.animatedentity.sprint_animation", new Object[0])));
        animations.add(PanelUtils.join(new Component[]{this.enable7, this.animation7}));
        animations.add(HelpUtils.wrapWithHelpButton(this.withEntry("geckolib/flight_animation"), L10N.label("elementgui.animatedentity.flight_animation", new Object[0])));
        animations.add(PanelUtils.join(new Component[]{this.enable8, this.animation8}));
        animations.add(HelpUtils.wrapWithHelpButton(this.withEntry("geckolib/riding_animation"), L10N.label("elementgui.animatedentity.riding_animation", new Object[0])));
        animations.add(PanelUtils.join(new Component[]{this.enable9, this.animation9}));
        animations.add(HelpUtils.wrapWithHelpButton(this.withEntry("geckolib/aggression_animation"), L10N.label("elementgui.animatedentity.aggression_animation", new Object[0])));
        animations.add(PanelUtils.join(new Component[]{this.enable10, this.animation10}));
        animations.add(HelpUtils.wrapWithHelpButton(this.withEntry("geckolib/lerp"), L10N.label("elementgui.animatedentity.lerp", new Object[0])));
        animations.add(this.lerp);
        JPanel animations_extras = new JPanel(new GridLayout(2, 2, 20, 2));
        animations_extras.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder((Color)UIManager.get("MCreatorLAF.BRIGHT_COLOR"), 1), L10N.t("elementgui.animatedentity.death_animations_boarder", new Object[0]), 0, 0, this.getFont().deriveFont(12.0F), (Color)UIManager.get("MCreatorLAF.BRIGHT_COLOR")));
        JPanel dpanel = new JPanel(new GridLayout(2, 2, 10, 2));
        dpanel.add(HelpUtils.wrapWithHelpButton(this.withEntry("geckolib/disable_death_rotation"), L10N.label("elementgui.animatedentity.disable_death_rotation", new Object[0])));
        dpanel.add(this.disableDeathRotation);
        dpanel.add(HelpUtils.wrapWithHelpButton(this.withEntry("geckolib/death_time"), L10N.label("elementgui.animatedentity.death_time", new Object[0])));
        dpanel.add(this.deathTime);
        JPanel dpanel_procedure = new JPanel(new GridLayout(1, 1, 10, 2));
        dpanel_procedure.add(this.finishedDying);
        animations_extras.add(PanelUtils.centerInPanel(dpanel));
        animations_extras.add(PanelUtils.centerInPanel(dpanel_procedure));
        JPanel extras = new JPanel(new GridLayout(2, 2, 20, 2));
        extras.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder((Color)UIManager.get("MCreatorLAF.BRIGHT_COLOR"), 1), L10N.t("elementgui.animatedentity.extras_boarder", new Object[0]), 0, 0, this.getFont().deriveFont(12.0F), (Color)UIManager.get("MCreatorLAF.BRIGHT_COLOR")));
        JPanel extras_head = new JPanel(new GridLayout(4, 2, 10, 2));
        extras_head.add(HelpUtils.wrapWithHelpButton(this.withEntry("geckolib/head_movement"), L10N.label("elementgui.animatedentity.head_movement", new Object[0])));
        extras_head.add(this.headMovement);
        extras_head.add(L10N.label("elementgui.animatedentity.group_name", new Object[0]));
        extras_head.add(this.groupName);
        extras_head.add(new JEmptyBox());
        extras_head.add(new JEmptyBox());
        extras_head.add(HelpUtils.wrapWithHelpButton(this.withEntry("geckolib/attack_interval"), L10N.label("elementgui.animatedentity.attack_interval", new Object[0])));
        extras_head.add(this.attackRate);
        extras.add(PanelUtils.centerInPanel(extras_head));
        JPanel merged_extras = new JPanel(new GridLayout(2, 1, 20, 2));
        merged_extras.add(animations_extras);
        merged_extras.add(extras);
        JPanel animations_master = new JPanel(new GridLayout(1, 2, 20, 2));
        animations_master.add(animations);
        animations_master.add(merged_extras);
        pane8.add(PanelUtils.totalCenterInPanel(animations_master));
        animations_master.setOpaque(false);
        animations_extras.setOpaque(false);
        animations.setOpaque(false);
        extras.setOpaque(false);
        merged_extras.setOpaque(false);
        dpanel_procedure.setOpaque(false);
        dpanel.setOpaque(false);
        extras_head.setOpaque(false);
        pane8.setOpaque(false);
        this.enable2.setOpaque(false);
        this.enable3.setOpaque(false);
        this.enable4.setOpaque(false);
        this.enable5.setOpaque(false);
        this.enable6.setOpaque(false);
        this.enable7.setOpaque(false);
        this.enable8.setOpaque(false);
        this.enable9.setOpaque(false);
        this.enable10.setOpaque(false);
        this.disableDeathRotation.setOpaque(false);
        this.headMovement.setOpaque(false);
        this.eyeHeight.setOpaque(false);
        this.addPage(L10N.t("elementgui.living_entity.page_visual_and_sound", new Object[0]), pane2);
        this.addPage(L10N.t("elementgui.living_entity.page_behaviour", new Object[0]), pane1);
        this.addPage(L10N.t("elementgui.living_entity.page_entity_data", new Object[0]), entityDataListPanel);
        this.addPage(L10N.t("elementgui.common.page_inventory", new Object[0]), pane7);
        this.addPage(L10N.t("elementgui.common.page_triggers", new Object[0]), pane4);
        this.addPage(L10N.t("elementgui.living_entity.page_ai_and_goals", new Object[0]), pane3);
        this.addPage(L10N.t("elementgui.living_entity.page_spawning", new Object[0]), pane5);
        this.addPage(L10N.t("elementgui.animatedentity.animations_page", new Object[0]), pane8);
        this.animation2.setEnabled(this.enable2.isSelected());
        this.animation3.setEnabled(this.enable3.isSelected());
        this.animation4.setEnabled(this.enable4.isSelected());
        this.animation5.setEnabled(this.enable5.isSelected());
        this.animation6.setEnabled(this.enable6.isSelected());
        this.animation7.setEnabled(this.enable7.isSelected());
        this.animation8.setEnabled(this.enable8.isSelected());
        this.animation9.setEnabled(this.enable9.isSelected());
        this.animation10.setEnabled(this.enable10.isSelected());
        this.groupName.setEnabled(this.headMovement.isSelected());
        this.height.setEnabled(this.eyeHeight.isSelected());
        this.enable2.addActionListener((actionEvent) -> this.animation2.setEnabled(this.enable2.isSelected()));
        this.enable3.addActionListener((actionEvent) -> this.animation3.setEnabled(this.enable3.isSelected()));
        this.enable4.addActionListener((actionEvent) -> this.animation4.setEnabled(this.enable4.isSelected()));
        this.enable5.addActionListener((actionEvent) -> this.animation5.setEnabled(this.enable5.isSelected()));
        this.enable6.addActionListener((actionEvent) -> this.animation6.setEnabled(this.enable6.isSelected()));
        this.enable7.addActionListener((actionEvent) -> this.animation7.setEnabled(this.enable7.isSelected()));
        this.enable8.addActionListener((actionEvent) -> this.animation8.setEnabled(this.enable8.isSelected()));
        this.enable9.addActionListener((actionEvent) -> this.animation9.setEnabled(this.enable9.isSelected()));
        this.enable10.addActionListener((actionEvent) -> this.animation10.setEnabled(this.enable10.isSelected()));
        this.headMovement.addActionListener((actionEvent) -> this.groupName.setEnabled(this.headMovement.isSelected()));
        this.eyeHeight.addActionListener((actionEvent) -> this.height.setEnabled(this.eyeHeight.isSelected()));
        if (!this.isEditingMode()) {
            String readableNameFromModElement = StringUtils.machineToReadableName(this.modElement.getName());
            this.mobName.setText(readableNameFromModElement);
        }

    }

    protected AggregatedValidationResult validatePage(int page) {
        if (page == 0) {
            return new AggregatedValidationResult(new ValidationGroup[]{this.page1group});
        } else if (page == 2) {
            return new AggregatedValidationResult(new ValidationGroup[]{this.page3group});
        } else if (page == 3) {
            return this.blockstateList.getValidationResult();
        } else if (page == 5) {
            return new AggregatedValidationResult(new IValidable[]{this.outSlotIDs, this.inSlotIDs});
        } else {
            return (AggregatedValidationResult) (page == 7 && (Integer) this.minGenerateHeight.getValue() >= (Integer) this.maxGenerateHeight.getValue() ? new AggregatedValidationResult.FAIL(L10N.t("elementgui.block.error_minimal_generation_height", new Object[0])) : new AggregatedValidationResult.PASS());
        }
    }

    public void openInEditingMode(LevelingEntity block) {

    }

    public LevelingEntity getElementFromGUI() {
        LevelingEntity entity = new LevelingEntity(this.modElement);
        return entity;
    }
}
